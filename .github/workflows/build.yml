name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  SCCACHE_GHA_ENABLED: "true"
  CMAKE_CXX_COMPILER_LAUNCHER: sccache
  CMAKE_C_COMPILER_LAUNCHER: sccache
  qt_from_cache: "true"

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true

    - uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64

    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.5

    - name: Install WiX
      run: dotnet tool install --global wix

    - name: Bootstrap Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Bootstrap Python env
      shell: pwsh
      run: |
         "bootstrap_python=python" | Out-File -FilePath $env:GITHUB_ENV -Append


    - name: Checkout Python
      shell: pwsh
      run: |
         git clone --branch v3.12.5 https://github.com/python/cpython.git




    - name: Build Python binaries
      shell: pwsh
      run: |
        cd cpython
        $Env:CXX="sccache $Env:CXX"
        $Env:CC="sccache $Env:CC"
        ./PCbuild/build.bat -p x64 -d -e

    - name: Python binary install pip and env
      shell: pwsh
      run: |
        ./cpython/PCbuild/amd64/python_d.exe -m ensurepip
        "built_python=${{ github.workspace }}/cpython/PCbuild/amd64/python_d.exe" | Out-File -FilePath $env:GITHUB_ENV -Append



    - name: Build Python docs
      shell: bash
      run: |
        cd cpython/Doc
        ${{ env.bootstrap_python }} -m pip install -r ./requirements.txt
        make PYTHON=${{ env.bootstrap_python }} BLURB="${{ env.bootstrap_python }} -m blurb" SPHINXBUILD="${{ env.bootstrap_python }} -m sphinx" html




    - name: Build Python MSI installer
      shell: bash
      run: |
        cpython/Tools/msi/build.bat -x64 --pack
        mkdir -p $(cygpath -u '${{ github.workspace }}/python-installer')
        cp -r cpython/PCbuild/amd64/* $(cygpath -u '${{ github.workspace }}/python-installer')

    - name: MSI env settings
      shell: bash
      run: |
        cd $(cygpath -u '${{ github.workspace }}/python-installer')
        INSTALLER=$(find $(pwd)/en-us -type f -name "py*.exe" | head -n1)
        echo "python_installer=\"$(cygpath -w $INSTALLER)\"" | tee -a $GITHUB_ENV

    - name: Upload installer
      uses: actions/upload-artifact@v4
      with:
        name: python-installer
        path: ${{ env.python_installer }}

    - name: Install built Python
      shell: pwsh
      run: |
        $install_dir="${{ github.workspace }}/../python-installed"
        "python_installed_folder=$install_dir" | Out-File -FilePath $env:GITHUB_ENV -Append
        "python_installed=$install_dir/python_d.exe" | Out-File -FilePath $env:GITHUB_ENV -Append
        & ${{ env.python_installer }} /quiet TargetDir=$install_dir AssociateFiles=0 Include_Debug=1 Include_symbols=1




    - name: Qt install path
      shell: pwsh
      run: |
         "qt_install=${{ github.workspace }}/qt-install" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Restore Qt from cache
      if: env.qt_from_cache == 'true'
      id: cache-qt
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.qt_install }}
        key: ${{ runner.os }}-qt-install

    - name: Checkout Qt
      if: steps.cache-qt.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
         git clone --branch 6.6.3 https://github.com/qtproject/qt5.git qt
         cd qt
         git submodule init qtbase qtdeclarative
         git submodule update

    - name: Build Qt
      shell: pwsh
      if: steps.cache-qt.outputs.cache-hit != 'true'
      run: |
         mkdir qt-build
         cd qt-build
         #$Env:CXX="sccache $Env:CXX"
         #$Env:CC="sccache $Env:CC"
         ../qt/configure.bat -prefix ${{ env.qt_install }} -opensource -confirm-license -release -nomake examples -nomake tests
         cmake --build . --parallel
         cmake --install .

    - name: Save Qt cache
      if: steps.cache-qt.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ env.qt_install }}
        key: ${{ runner.os }}-qt-install

    - name: Install Libclang from Qt
      shell: pwsh
      run: |
         curl -L https://download.qt.io/development_releases/prebuilt/libclang/libclang-release_18.1.7-based-windows-vs2019_64.7z --output libclang.7z
         7z x libclang.7z -olibclang
         "LLVM_INSTALL_DIR=${{ github.workspace }}/libclang" | Out-File -FilePath $env:GITHUB_ENV -Append
         "${{ github.workspace }}/libclang/bin" | Out-File -FilePath $env:GITHUB_PATH -Append

    - name: Checkout PySide
      shell: pwsh
      run: |
          git clone --branch 6.6.3.1 https://code.qt.io/pyside/pyside-setup.git pyside
          cd pyside
          git submodule update --init --recursive

    - name: Pyside venv
      shell: pwsh
      run: |
          ${{ env.python_installed }} -m venv pyside_venv
          "python_in_venv=${{ github.workspace }}/pyside_venv/Scripts/python_d.exe" | Out-File -FilePath $env:GITHUB_ENV -Append


    - name: Build PySide
      shell: pwsh
      run: |
          cd pyside
          ${{ env.python_in_venv }} -m pip install -r requirements.txt
          ${{ env.python_in_venv }} setup.py build --qtpaths="${{ env.qt_install }}/bin/qtpaths.exe" --ignore-git --parallel=4

    # - name: Setup tmate session
    #   if: failure()
    #   uses: SanderVocke/action-tmate@master

    # - name: Archive DLL
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: release-dll
    #     path: Output/winmm.dll
