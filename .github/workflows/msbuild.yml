name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  SCCACHE_GHA_ENABLED: "true"
  CMAKE_CXX_COMPILER_LAUNCHER: sccache
  CMAKE_C_COMPILER_LAUNCHER: sccache

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true

    - uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64
  
    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.5
    
    - name: Checkout Python
      shell: pwsh
      run: |
         git clone --branch v3.12.5 https://github.com/python/cpython.git
    
    - name: Build Python
      shell: pwsh
      run: |
        cd cpython
        $Env:CXX="sccache $Env:CXX"
        $Env:CC="sccache $Env:CC"
        ./PCBuild/build.bat -p x64 -d -e
        echo "python=${{ github.workspace }}/cpython/PCBuild/amd64/python_d.exe" >> $GITHUB_ENV
        echo "python_artifacts=${{ github.workspace }}/cpython/PCBuild/amd64" >> $GITHUB_ENV
    
    - name: Checkout Qt
      shell: pwsh
      run: |
         git clone --branch 6.6.3 https://github.com/qtproject/qt5.git qt
         cd qt
         git submodule init qtbase qtdeclarative
         git submodule update
    
    - name: Build Qt
      shell: pwsh
      run: |
         mkdir qt-build
         cd qt-build
         #$Env:CXX="sccache $Env:CXX"
         #$Env:CC="sccache $Env:CC"
         ../qt/configure.bat -prefix ${{ github.workspace }}/qt-install -opensource -confirm-license -release -nomake examples -nomake tests
         cmake --build . --parallel
         cmake --install .
         echo "QT_INSTALL_DIR=${{ github.workspace }}/qt-install" >> $GITHUB_ENV

    - name: find
      shell: pwsh
      run: |
         Get-ChildItem -Path . -Filter "qtpaths.exe" -Recurse

    - name: Install Libclang from Qt
      shell: pwsh
      run: |
         curl -L https://download.qt.io/development_releases/prebuilt/libclang/libclang-release_18.1.7-based-windows-vs2019_64.7z --output libclang.7z
         7z x libclang.7z -olibclang
         echo "LLVM_INSTALL_DIR={{ github.workspace }}/libclang" >> $GITHUB_ENV
         echo "{{ github.workspace }}/libclang/bin" >> $GITHUB_PATH

    - name: Checkout PySide
      shell: pwsh
      run: |
          git clone --branch 6.6.3.1 https://code.qt.io/pyside/pyside-setup.git pyside
          cd pyside
          git submodule update --init --recursive

    - name: Pyside venv
      shell: pwsh
      run: |
          ${{ env.python }} -m venv pyside_venv
          echo "python_in_venv={{ github.workspace }}/pyside_venv/Scripts/python_d.exe" >> $GITHUB_ENV
          

    - name: Build PySide
      shell: pwsh
      run: |
          cd pyside
          ${{ env.python_in_venv }} -m pip install -r requirements.txt
          ${{ env.python_in_venv }} setup.py build --qtpaths=$QT_INSTALL_DIR/bin/qtpaths --ignore-git --parallel=4

    - name: Archive DLL
      uses: actions/upload-artifact@v4
      with:
        name: release-dll
        path: Output/winmm.dll
